<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prashant Bhat&#39;s Website</title>
    <link>/projects/</link>
    <description>Recent content on Prashant Bhat&#39;s Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    
	<atom:link href="/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Commons CSV</title>
      <link>/projects/commons-csv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/commons-csv/</guid>
      <description>Apache Commons CSV This library is a fork of the Apache Commons CSV. The source code is published as a GitHub Project under Apache License.
Additionally, it has following changes:
 Added module-info.java and requires Java 11. Replace Assertions.notNull() usage with Objects.requireNonNull() Remove dependency on java.sql module and remove unnecessary boxing  Documentation:
Latest API docs are accessible here.
Download:
To add a dependency using Maven, use the following:</description>
    </item>
    
    <item>
      <title>Javax Inject</title>
      <link>/projects/javax.inject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/javax.inject/</guid>
      <description>Java Inject API This library is a fork of the JSR-330 specification. The source code is published as a GitHub Project under Apache License.
Additionally, it has following changes:
 Added module-info.java and requires Java 11. Fixed HTML 5 errors in javadocs  Documentation: Latest API docs are accessible here.
Download:
To add a dependency using Maven, use the following:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.github.pustike&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;javax.inject&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  To add a dependency using Gradle:</description>
    </item>
    
    <item>
      <title>Pustike Event Bus</title>
      <link>/projects/pustike-eventbus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/pustike-eventbus/</guid>
      <description>Pustike EventBus Pustike EventBus is a fork of Guava EventBus, which is probably the most commonly known event bus for Java. Most of the documentation here and test cases are from Guava itself.
EventBus is a library providing publisher/subscriber pattern for loose coupling between components(event senders and receivers), by sending messages to each other indirectly. Some objects register with the bus to be notified when certain events of interest occur.</description>
    </item>
    
    <item>
      <title>Pustike Inject</title>
      <link>/projects/pustike-inject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/pustike-inject/</guid>
      <description>Pustike Inject Pustike Inject is a simple dependency injection framework that implements the JSR-330 specification.
Injector is the core part of this library and tracks all dependencies for all types configured by module binders. A module uses the binder to defines bindings, which will be used to create an Injector. When an instance of a type or of a binding key is requested, the injector returns the instance by creating it and injecting all its declared dependencies (fields and constructor/methods).</description>
    </item>
    
    <item>
      <title>Pustike Maven Parent</title>
      <link>/projects/pustike-maven-parent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/pustike-maven-parent/</guid>
      <description>Pustike Maven Parent This project contains common Maven configuration for Pustike projects and is published as a GitHub Project under Apache License.
 
Usage:
Include it in the parent section of pom.xml, as shown here:
&amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;io.github.pustike&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;pustike-maven-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.1.1&amp;lt;/version&amp;gt; &amp;lt;/parent&amp;gt;  Properties:
 Project&amp;rsquo;s source encoding is set to: UTF-8 Compiler&amp;rsquo;s source and target are set to Java version: 11  Dependencies:
Test dependencies for JUnit 5 are included.</description>
    </item>
    
    <item>
      <title>Pustike Persist</title>
      <link>/projects/pustike-persist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/pustike-persist/</guid>
      <description>Pustike Persist Pustike Persist is an object based persistence library. Using a simple configuration and annotation based entity mapping, it provides features like schema generation, sql query api to insert / update / delete objects and a fluent data finder api.
Using Java Persistence API is the standard approach to object persistence in Java based applications. And it is a comprehensive and complex API to implement and use. Using a JPA implementation for persistence can add lot of overhead to small/medium sized applications.</description>
    </item>
    
    <item>
      <title>Pustike Web</title>
      <link>/projects/pustike-web/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/pustike-web/</guid>
      <description>Pustike Web Pustike Web provides API for creating application using RESTful Web Services with a central servlet DispatcherServlet, having an API similar to JAX-RS. Applications developed using this library can be deployed in any Servlet container like other web frameworks.
The WebServletContextListener and a DispatcherServlet need to be declared and mapped according to the Servlet specification by using Java configuration or in web.xml. During servlet context initialization, the dependency injector should be configured using the ServletModule and other application specific modules.</description>
    </item>
    
    <item>
      <title>Website</title>
      <link>/projects/website/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/website/</guid>
      <description>Website Work In Progress&amp;hellip;</description>
    </item>
    
  </channel>
</rss>